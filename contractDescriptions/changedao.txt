1. Ownable
The contract is Ownable so that the address which deploys this contract will have access control over any functions with the modifier, onlyOwner.

2. Approval
All changemakers need to be registered in order to create projects.

a) approvedChangeMakers
This mapping holds the addresses of all organizations that have been approved to be changeMakers.

b) approveNewChangeMaker()
An organization goes through the off-chain application process. When the ChangeDao team has decided that the organization meets the standards to participate, the changeDao contract owner will call this function.  The organization's address will be added to the approvedChangeMakers mapping with a value of true.

c) removeApproval()
The changeDao owner has the ability to revoke an organization's status to be a changeMaker.  This function will change the organization's value in approvedChangeMakers to false.

Questions:
Q1) SKELLETOR: The addresses in approvedChangeMakers are all unique values.  Would it be better to use EnumerableSet.AddressSet?

Q2) GEORGE: Do you want a getter function to return the approval status?  Or is it okay just to get it from the mapping directly since it is a public function?

3. Registration
a) register()
Only organization's that have their address in approvedChangeMakers set to true can call this function.
More to come (obviously!! otherwise this is the world's simplest app)

4. Fund distribution
a) state variables
changeMakerPercentage
changeDaoPercentage
communityFundPercentage
These variables hold the percentage value that each will receive when funds are distributed after a project has been fully funded and tokens have been minted.

b) setPercentageDistributions()
The owner of the ChangeDao contract can set the percentages.

Q3) SKELLETOR: The max value for any variable is 10000.  So it will work to declare these as uint16, right?  This will allow all of them to be stored in one slot.
